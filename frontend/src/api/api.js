// src/api/api.js
import axiosInstance from './axiosInstance'; // Ïù¥ Ï§Ñ Ï∂îÍ∞Ä!
import axios from 'axios';

// Í∏∞Ï°¥Ïùò Ï§ëÎ≥µÎêú axios Ïù∏Ïä§ÌÑ¥Ïä§ Ï†úÍ±∞
// const api = axios.create({
//   baseURL: '/api/v1', // ÌîÑÎ°ùÏãúÎ•º ÌÜµÌï¥ Î∞±ÏóîÎìúÎ°ú Ï†ÑÎã¨
//   withCredentials: false, // Ïø†ÌÇ§ Ïù∏Ï¶ù Ïãú ÌïÑÏöî
//   headers: {
//     'Content-Type': 'application/json',
//   },
//   timeout: 45000, // 45Ï¥àÎ°ú Ï¶ùÍ∞Ä (Î≥µÏû°Ìïú ÏøºÎ¶¨ Í≥†Î†§)
// });

// ÏöîÏ≤≠ Ï†Ñ Ïù∏ÌÑ∞ÏÖâÌÑ∞: ÌÜ†ÌÅ∞Ïù¥ ÏûàÎã§Î©¥ ÏûêÎèôÏúºÎ°ú Ï∂îÍ∞Ä
axiosInstance.interceptors.request.use(
  (config) => {
    const token = localStorage.getItem('token');
    console.log('Current token:', token ? 'exists' : 'missing');
    
    if (token) {
      config.headers.Authorization = `Bearer ${token}`;
      console.log('Request headers:', config.headers);
    } else {
      console.warn('No authentication token found');
    }
    return config;
  },
  (error) => {
    console.error('Request interceptor error:', error);
    return Promise.reject(error);
  }
);

// ÏùëÎãµ Ïù∏ÌÑ∞ÏÖâÌÑ∞: ÏóêÎü¨ Î°úÍπÖ ÎòêÎäî ÌÜ†ÌÅ∞ ÎßåÎ£å Ïãú Ï≤òÎ¶¨ Îì±
axiosInstance.interceptors.response.use(
  (response) => response,
  (error) => {
    if (error.response) {
      console.error('Response error:', {
        status: error.response.status,
        data: error.response.data,
        headers: error.response.headers
      });
      
      if (error.response.status === 401) {
        console.warn('üîí Ïù∏Ï¶ù Ïò§Î•ò - Î°úÍ∑∏Ïù∏ ÌïÑÏöî');
        // Clear invalid token
        localStorage.removeItem('token');
        localStorage.removeItem('user');
        // You might want to redirect to login here
        window.location.href = '/login';
      }
    } else if (error.code === 'ECONNABORTED') {
      console.error('‚è∞ ÏöîÏ≤≠ ÌÉÄÏûÑÏïÑÏõÉ:', {
        url: error.config?.url,
        method: error.config?.method,
        timeout: error.config?.timeout
      });
      
      // ÌÉÄÏûÑÏïÑÏõÉ Ïò§Î•òÏóê ÎåÄÌïú ÏÇ¨Ïö©Ïûê ÏπúÌôîÏ†Å Î©îÏãúÏßÄ
      if (error.message.includes('timeout')) {
        console.warn('üîÑ ÏÑúÎ≤Ñ ÏùëÎãµÏù¥ ÏßÄÏó∞ÎêòÍ≥† ÏûàÏäµÎãàÎã§. Ïû†Ïãú ÌõÑ Îã§Ïãú ÏãúÎèÑÌï¥Ï£ºÏÑ∏Ïöî.');
      }
    }
    return Promise.reject(error);
  }
);

export default axiosInstance;

// AI Agent API (Í∞ÄÏ§ëÏπò Ï∂îÏ∂úÏö©)
const agentApi = axios.create({
  baseURL: 'http://localhost:8001', // AI Agent ÏÑúÎ≤Ñ Ï£ºÏÜå
  headers: {
    'Content-Type': 'application/json',
  },
  timeout: 60000, // 60Ï¥àÎ°ú Ï¶ùÍ∞Ä (AI Î™®Îç∏ Î°úÎî© ÏãúÍ∞Ñ Í≥†Î†§)
});

export const extractWeights = async (jobPostingContent, existingWeights = []) => {
  try {
    const response = await agentApi.post('/extract-weights/', {
      job_posting: jobPostingContent,
      existing_weights: existingWeights
    });
    return response.data;
  } catch (error) {
    console.error('Í∞ÄÏ§ëÏπò Ï∂îÏ∂ú Ïã§Ìå®:', error);
    throw error;
  }
};

// ÎßûÏ∂§Î≤ï Í≤ÄÏÇ¨ API
export const spellCheck = async (text, fieldName = "") => {
  try {
    const response = await axiosInstance.post('/ai-evaluate/spell-check', {
      text: text,
      field_name: fieldName
    });
    return response.data;
  } catch (error) {
    console.error('ÎßûÏ∂§Î≤ï Í≤ÄÏÇ¨ Ïã§Ìå®:', error);
    throw error;
  }
};

// Í∞úÎ∞úÏûê Ï†ÑÏö© Îπ†Î•∏ Î°úÍ∑∏Ïù∏ API
export const devLogin = async (email) => {
  try {
    const response = await axiosInstance.post('/auth/dev-login', { email });
    return response.data;
  } catch (error) {
    console.error('Îπ†Î•∏ Î°úÍ∑∏Ïù∏ Ïã§Ìå®:', error);
    throw error;
  }
};

// ÏûêÍ∏∞ÏÜåÍ∞úÏÑú ÌòïÍ¥ëÌéú ÌïòÏù¥ÎùºÏù¥ÌåÖ API (application_id Í∏∞Î∞ò)
export const highlightResumeByApplicationId = async (applicationId, jobpostId = null, companyId = null) => {
  try {
    const response = await axiosInstance.post('/ai/highlight-resume-by-application', {
      application_id: applicationId,
      jobpost_id: jobpostId,
      company_id: companyId
    }, {
      timeout: 300000 // 5Î∂ÑÏúºÎ°ú Ï¶ùÍ∞Ä (AI Î∂ÑÏÑù ÏãúÍ∞Ñ Í≥†Î†§)
    });
    return response.data;
  } catch (error) {
    console.error('ÌïòÏù¥ÎùºÏù¥ÌåÖ Î∂ÑÏÑù Ïã§Ìå®:', error);
    if (error.code === 'ECONNABORTED') {
      throw new Error('ÌïòÏù¥ÎùºÏù¥ÌåÖ Î∂ÑÏÑù ÏãúÍ∞ÑÏù¥ Ï¥àÍ≥ºÎêòÏóàÏäµÎãàÎã§. Ïû†Ïãú ÌõÑ Îã§Ïãú ÏãúÎèÑÌï¥Ï£ºÏÑ∏Ïöî.');
    }
    throw error;
  }
};

// Ï†ÄÏû•Îêú ÌïòÏù¥ÎùºÏù¥ÌåÖ Í≤∞Í≥º Ï°∞Ìöå
export const getHighlightResults = async (applicationId) => {
  try {
    const response = await axiosInstance.get(`/ai/highlight-results/${applicationId}`);
    return response.data;
  } catch (error) {
    console.error('ÌïòÏù¥ÎùºÏù¥ÌåÖ Í≤∞Í≥º Ï°∞Ìöå Ïã§Ìå®:', error);
    throw error;
  }
};

// Ï†ÄÏû•Îêú ÌïòÏù¥ÎùºÏù¥ÌåÖ Í≤∞Í≥º ÏÇ≠Ï†ú
export const deleteHighlightResults = async (applicationId) => {
  try {
    const response = await axiosInstance.delete(`/ai/highlight-results/${applicationId}`);
    return response.data;
  } catch (error) {
    console.error('ÌïòÏù¥ÎùºÏù¥ÌåÖ Í≤∞Í≥º ÏÇ≠Ï†ú Ïã§Ìå®:', error);
    throw error;
  }
};


export async function getResumeHighlights(text) {
  try {
    const response = await axiosInstance.post('/ai-evaluate/highlight-resume', {
      text: text
    });
    return response.data;
  } catch (error) {
    console.error('Ïù¥Î†•ÏÑú ÌïòÏù¥ÎùºÏù¥Ìä∏ Ïã§Ìå®:', error);
    throw error;
  }
}

// Î©¥Ï†ë ÌèâÍ∞Ä Ìï≠Î™© Ï°∞Ìöå API
export const getInterviewEvaluationItems = async (resumeId, applicationId = null, interviewStage) => {
  try {
    const response = await axiosInstance.post('/interview-questions/evaluation-items/interview', {
      resume_id: resumeId,
      application_id: applicationId,
      interview_stage: interviewStage // "practical" ÎòêÎäî "executive"
    });
    return response.data;
  } catch (error) {
    console.error('Î©¥Ï†ë ÌèâÍ∞Ä Ìï≠Î™© Ï°∞Ìöå Ïã§Ìå®:', error);
    throw error;
  }
};

// Ïù¥Î†•ÏÑú Í∏∞Î∞ò ÌèâÍ∞Ä Í∏∞Ï§Ä Ï°∞Ìöå API
export const getResumeBasedEvaluationCriteria = async (resumeId, applicationId = null, interviewStage = null) => {
  try {
    const params = new URLSearchParams();
    if (applicationId) params.append('application_id', applicationId);
    if (interviewStage) params.append('interview_stage', interviewStage);
    
    const response = await axiosInstance.get(`/interview-questions/evaluation-criteria/resume/${resumeId}?${params}`);
    return response.data;
  } catch (error) {
    console.error('Ïù¥Î†•ÏÑú Í∏∞Î∞ò ÌèâÍ∞Ä Í∏∞Ï§Ä Ï°∞Ìöå Ïã§Ìå®:', error);
    throw error;
  }
};

// Î©¥Ï†ë ÌèâÍ∞Ä Ï†ÄÏû• API
export const saveInterviewEvaluation = async (evaluationData) => {
  try {
    const response = await axiosInstance.post('/interview-evaluation/', evaluationData);
    return response.data;
  } catch (error) {
    console.error('Î©¥Ï†ë ÌèâÍ∞Ä Ï†ÄÏû• Ïã§Ìå®:', error);
    throw error;
  }
};

// ÏûÑÏõêÏßÑ Î©¥Ï†ë ÌèâÍ∞Ä Ï†ÄÏû• API
export const saveExecutiveInterviewEvaluation = async (applicationId, evaluationData) => {
  try {
    const response = await axiosInstance.post(`/executive-interview/evaluate/${applicationId}`, evaluationData);
    return response.data;
  } catch (error) {
    console.error('ÏûÑÏõêÏßÑ Î©¥Ï†ë ÌèâÍ∞Ä Ï†ÄÏû• Ïã§Ìå®:', error);
    throw error;
  }
};

// Î©¥Ï†ë ÌèâÍ∞Ä Í≤∞Í≥º Ï°∞Ìöå API
export const getInterviewEvaluation = async (applicationId, interviewType = 'practical') => {
  try {
    const response = await axiosInstance.get(`/interview-evaluation/${applicationId}/${interviewType}`);
    return response.data;
  } catch (error) {
    console.error('Î©¥Ï†ë ÌèâÍ∞Ä Í≤∞Í≥º Ï°∞Ìöå Ïã§Ìå®:', error);
    throw error;
  }
};

// ÏßÄÏõêÏûê Ï†ïÎ≥¥ Ï°∞Ìöå API
export const getApplication = async (applicationId) => {
  try {
    const response = await axiosInstance.get(`/applications/${applicationId}`);
    return response.data;
  } catch (error) {
    console.error('ÏßÄÏõêÏûê Ï†ïÎ≥¥ Ï°∞Ìöå Ïã§Ìå®:', error);
    throw error;
  }
};

// Î∂ÑÏÑù Í≤∞Í≥º Ï°∞Ìöå API
export const getAnalysisResult = async (applicationId, analysisType) => {
  try {
    const response = await axiosInstance.get(`/analysis-results/application/${applicationId}/${analysisType}`);
    return response.data;
  } catch (error) {
    if (error.response?.status === 404) {
      throw error; // 404Îäî Ï†ÄÏû•Îêú Í≤∞Í≥ºÍ∞Ä ÏóÜÏùåÏùÑ ÏùòÎØ∏
    }
    console.error('Î∂ÑÏÑù Í≤∞Í≥º Ï°∞Ìöå Ïã§Ìå®:', error);
    throw error;
  }
};

export const getAllAnalysisResults = async (applicationId) => {
  try {
    const response = await axiosInstance.get(`/analysis-results/application/${applicationId}`);
    return response.data;
  } catch (error) {
    console.error('Î™®Îì† Î∂ÑÏÑù Í≤∞Í≥º Ï°∞Ìöå Ïã§Ìå®:', error);
    throw error;
  }
};

export const deleteAnalysisResult = async (applicationId, analysisType) => {
  try {
    const response = await axiosInstance.delete(`/analysis-results/application/${applicationId}/${analysisType}`);
    return response.data;
  } catch (error) {
    console.error('Î∂ÑÏÑù Í≤∞Í≥º ÏÇ≠Ï†ú Ïã§Ìå®:', error);
    throw error;
  }
};