version: '3.8'

services:
  backend:
    build:
      context: .
      dockerfile: backend/Dockerfile
    container_name: kocruit_fastapi
    ports:
      - "8000:8000"
    env_file:
      - .env
    environment:
      DB_HOST: kocruit-02.c5k2wi2q8g80.us-east-2.rds.amazonaws.com
      DB_PORT: 3306
      DB_NAME: kocruit
      DB_USER: admin
      DB_PASSWORD: kocruit1234!
    networks:
      - app-net
    volumes:
      - ./backend:/app
      - ./agent:/app/agent
    command: uvicorn app.main:app --host 0.0.0.0 --port 8000 --reload
    restart: unless-stopped
    depends_on:
      redis:
        condition: service_healthy
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:8000/health"]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 40s

  agent:
    build:
      context: .
      dockerfile: agent/Dockerfile
    container_name: kocruit_agent
    ports:
      - "8001:8001"
    env_file:
      - .env
    environment:
      - REDIS_URL=redis://redis:6379
      - REDIS_HOST=redis
    depends_on:
      redis:
        condition: service_healthy
    volumes:
      - ./agent:/app/agent
      - ./backend:/app/backend
      - ./.env:/app/.env
    networks:
      - app-net
    command: uvicorn agent.main:app --host 0.0.0.0 --port 8001 --reload
    restart: unless-stopped
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:8001/health"]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 40s

  frontend:
    image: node:18-alpine
    container_name: kocruit_react
    working_dir: /app
    volumes:
      - ./frontend:/app
      - /app/node_modules
    ports:
      - "5173:5173"
    environment:
      - CHOKIDAR_USEPOLLING=true
    command: sh -c "npm install && npm run dev -- --host"
    networks:
      - app-net
    restart: unless-stopped
    depends_on:
      - backend
      - agent

  redis:
    image: redis:7.2-alpine
    container_name: kosa-redis
    command: redis-server --maxmemory 512mb --maxmemory-policy allkeys-lru --save 900 1 --save 300 10 --save 60 10000
    ports:
      - "6379:6379"
    volumes:
      - redis_data:/data
      - ./redis.conf:/usr/local/etc/redis/redis.conf
    restart: always
    networks:
      - app-net
    healthcheck:
      test: ["CMD", "redis-cli", "ping"]
      interval: 30s
      timeout: 10s
      retries: 3

volumes:
  redis_data:

networks:
  app-net:
    driver: bridge
