version: '3.8'

services:
  mysql:
    image: mysql:8.0
    container_name: kocruit_mysql_local
    ports:
      - "3307:3306"
    environment:
      MYSQL_ROOT_PASSWORD: root1234!
      MYSQL_DATABASE: kocruit
      MYSQL_CHARACTER_SET_SERVER: utf8mb4
      MYSQL_COLLATION_SERVER: utf8mb4_unicode_ci
      MYSQL_DEFAULT_AUTHENTICATION_PLUGIN: mysql_native_password
      MYSQL_ROOT_HOST: '%'
    volumes:
      - mysql_data:/var/lib/mysql
      - ./initdb:/docker-entrypoint-initdb.d
    networks:
      - app-net
    restart: unless-stopped
    healthcheck:
      test: ["CMD", "mysqladmin", "ping", "-h", "localhost", "-u", "root", "-proot1234!"]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 40s

  backend:
    build:
      context: .
      dockerfile: backend/Dockerfile
    container_name: kocruit_fastapi
    ports:
      - "8000:8000"
    env_file:
      - .env
    environment:
      DB_HOST: mysql
      DB_PORT: 3306
      DB_NAME: kocruit
      DB_USER: root
      DB_PASSWORD: root1234!
      # MySQL 연결 안정성 향상 설정
      MYSQL_CONNECT_TIMEOUT: 30
      MYSQL_READ_TIMEOUT: 30
      MYSQL_WRITE_TIMEOUT: 30
      MYSQL_MAX_CONNECTIONS: 10
      MYSQL_WAIT_TIMEOUT: 28800
      MYSQL_INTERACTIVE_TIMEOUT: 28800
      # Redis 캐싱 설정
      REDIS_HOST: redis
      REDIS_PORT: 6379
      REDIS_DB: 0
      # 애플리케이션 성능 설정
      WORKERS: 2
      WORKER_CONNECTIONS: 1000
    networks:
      - app-net
    volumes:
      - ./backend:/app
      - ./agent:/app/agent
      - ./initdb:/app/initdb
    command: uvicorn app.main:app --host 0.0.0.0 --port 8000 --reload --workers 2
    restart: unless-stopped
    depends_on:
      mysql:
        condition: service_healthy
      redis:
        condition: service_healthy
    healthcheck:
      test: ["CMD", "python", "-c", "import requests; requests.get('http://localhost:8000/health').raise_for_status()"]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 40s

  agent:
    build:
      context: .
      dockerfile: agent/Dockerfile
    container_name: kocruit_agent
    ports:
      - "8001:8001"

    env_file:
      - .env
    environment:
      - REDIS_URL=redis://redis:6379
      - REDIS_HOST=redis
      - DB_HOST=mysql
      - DB_PORT=3306
      - DB_NAME=kocruit
      - DB_USER=root
      - DB_PASSWORD=root1234!
    depends_on:
      mysql:
        condition: service_healthy
      redis:
        condition: service_healthy
    volumes:
      - ./agent:/app/agent
      - ./backend:/app/backend
      - ./.env:/app/.env
      - ./data:/app/data
      - ./initdb:/app/initdb
    networks:
      - app-net
    command: uvicorn agent.main:app --host 0.0.0.0 --port 8001 --reload
    restart: unless-stopped

  frontend:
    image: node:20-alpine
    container_name: kocruit_react
    working_dir: /app
    volumes:
      - ./frontend:/app
      - /app/node_modules
    ports:
      - "5173:5173"
    environment:
      - CHOKIDAR_USEPOLLING=true
    command: sh -c "npm install && npm run dev"
    networks:
      - app-net
    restart: unless-stopped
    depends_on:
      - backend
      - agent

  video-analysis:
    build:
      context: .
      dockerfile: video-analysis/Dockerfile
    container_name: kocruit_video_analysis
    ports:
      - "8002:8002"
    env_file:
      - .env
    environment:
      - REDIS_HOST=redis
      - REDIS_PORT=6379
      - DB_HOST=mysql
      - DB_PORT=3306
      - DB_NAME=kocruit
      - DB_USER=root
      - DB_PASSWORD=root1234!
      - GOOGLE_DRIVE_API_KEY=${GOOGLE_DRIVE_API_KEY}
    depends_on:
      mysql:
        condition: service_healthy
      redis:
        condition: service_healthy
    volumes:
      - ./video-analysis:/app
      - ./backend:/app/backend
      - ./.env:/app/.env
      - ./data:/app/data
      - video_analysis_cache:/app/.cache
    networks:
      - app-net
    command: uvicorn main:app --host 0.0.0.0 --port 8002 --reload
    restart: unless-stopped
    healthcheck:
      test: ["CMD", "python", "-c", "import requests; requests.get('http://localhost:8002/health').raise_for_status()"]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 40s

  redis:
    image: redis:7.2-alpine
    container_name: kosa-redis
    command: redis-server --maxmemory 256mb --maxmemory-policy allkeys-lru --save 900 1 --save 300 10 --save 60 10000 --tcp-keepalive 300
    ports:
      - "6379:6379"
    volumes:
      - redis_data:/data
      - ./redis.conf:/usr/local/etc/redis/redis.conf
    restart: always
    networks:
      - app-net
    healthcheck:
      test: ["CMD", "redis-cli", "ping"]
      interval: 30s
      timeout: 10s
      retries: 3

volumes:
  mysql_data:
  redis_data:
  video_analysis_cache:

networks:
  app-net:
    driver: bridge